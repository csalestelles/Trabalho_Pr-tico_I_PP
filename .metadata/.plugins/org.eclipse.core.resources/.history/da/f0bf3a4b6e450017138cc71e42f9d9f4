package BibliotecaSIS;

import java.sql.*;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

public class UsuarioDAO extends BancoDeDados {
	
	private Usuario usuario;
	private PreparedStatement statement;
	private ResultSet resultSet;
	private String men, sql;
	public BancoDeDados bd;
	
	public UsuarioDAO()
	{
		bd = new BancoDeDados();
		usuario = new Usuario();
	}
	
	public boolean localizar()
	{
		sql = "SELECT * FROM Usuarios WHERE User=?";
		try
		{
			statement = BancoDeDados.conexao.prepareStatement(sql);
			statement.setString(1, usuario.getNomeDeUsuario());
			resultSet = statement.executeQuery();
			resultSet.next();
			usuario.setNomeCompleto(resultSet.getString(2));
			usuario.setNomeDeUsuario(resultSet.getString(3));
			usuario.setSenha(resultSet.getString(4));
			usuario.setAnoDeNascimento(resultSet.getString(5));
			return true;
		}
		catch(SQLException erro){return false;}
	}
	
	public String atualizar(int operacao)
	{
		men = "Operação realizada com sucesso!";
		
		try
		{
			if (operacao == BancoDeDados.INCLUSAO)
			{
				sql = "INSERT INTO Usuarios VALUES (NULL, ?, ?, ?, ?)";
				statement = bd.conexao.prepareStatement(sql);
				statement.setString(1, usuario.getNomeCompleto());
				statement.setString(2, usuario.getNomeDeUsuario());
				statement.setString(3, usuario.getSenha());
				statement.setString(4, usuario.getAnoDeNascimento());
			}
			else if(operacao == BancoDeDados.ALTERACAO)
			{
				sql = "UPDATE Usuarios SET NomeCompleto=?, Pass=?, Data de nascimento=? WHERE User=?";
				statement = bd.conexao.prepareStatement(sql);
				statement.setString(1, usuario.getNomeCompleto());
				statement.setString(2, usuario.getSenha());
				statement.setString(3, usuario.getAnoDeNascimento());
				statement.setString(4, usuario.getNomeDeUsuario());
			}
			else if (operacao == BancoDeDados.EXCLUSAO)
			{
				sql = "DELETE FROM Usuarios WHERE User=?";
				statement = bd.conexao.prepareStatement(sql);
				statement.setString(1, usuario.getNomeDeUsuario());
			}
			if(statement.executeUpdate() == 0)
			{
				men = "Falha na operacao!";
			}
		}
		catch(SQLException g){men = "Falha na operação";}
		return men;
	}
	
	public void showLivrosTable(JTable table)
	{
		ArrayList<Livro> listLivros = new ArrayList<Livro>();
		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); 
		table.setModel(new DefaultTableModel(
				new String[]{"Título", "Autor", "Editora", "Idioma", "Ano", "Edição", "Exemplares"}, 0) {
				public boolean isCellEditable(int row, int col)
				{	
					return false;
				}
				});
		try 
		{
			listLivros = listarLivros();
		} 
		catch (SQLException e) {e.printStackTrace();}
		
		DefaultTableModel model =(DefaultTableModel)table.getModel();
		model.setNumRows(0);
		Object[] row = new Object[7];
		for (int i=0; i<listLivros.size();i++)
		{
			row[0] = listLivros.get(i).getTitulo();
			row[1] = listLivros.get(i).getAutor();
			row[2] = listLivros.get(i).getEditora();
			row[3] = listLivros.get(i).getIdioma();
			row[4] = listLivros.get(i).getAno();
			row[5] = listLivros.get(i).getEdicao();
			row[6] = listLivros.get(i).getNumExemplaresDisponiveis();
			
			model.addRow(row);
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
//	public void setTabela(JTable tabela, JScrollPane scroll) throws SQLException
//	{
//		String sql = "SELECT * FROM Usuarios";
//		statement = bd.conexao.prepareStatement(sql);
//		resultSet = statement.executeQuery();	
//		
//		@SuppressWarnings("serial")
//		DefaultTableModel modelo = new DefaultTableModel(
//				new String[]{}, 0) 
//				{
//					public boolean isCellEditable(int row, int col)
//					{		
//						return false;
//					}
//				};
//				
//		
//		int qtdColunas = resultSet.getMetaData().getColumnCount() - 1;		
//		for(int indice = 1; indice <= qtdColunas; indice++)
//		{
//			modelo.addColumn(resultSet.getMetaData().getColumnName(indice+1));
//		}
//		
//		tabela = new JTable(modelo);
//		DefaultTableModel dtm = (DefaultTableModel) tabela.getModel();
//		
//		while(resultSet.next())
//		{
//			String[] dados = new String[qtdColunas];
//			for(int i = 1; i <= qtdColunas; i++)
//			{
//				dados[i-1] = resultSet.getString(i+1);
//			}
//			
//			dtm.addRow(dados);
//			scroll.setViewportView(tabela);
//		}
//	}

}
